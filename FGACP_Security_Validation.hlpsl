role role_A(A,B:agent, %A, B represent the attributes 
	Ka,Kb,Kc:public_key, % Public keys of A, B and TA
	SND,RCV:channel(dy))
played_by A def=
	local
		State:nat, % Local state declaration
		Na,Nb,S:text, % Defining the cryptographic nonces and the secret message
                		Kab:symmetric_key % Defining the symmetric session key
	init
		State := 0 % Local State Initiation 
	transition
		1. State=0 /\ RCV(start) =|> 
                   		State':=1 /\ Na':=new() /\ % Creates a new nonce value for Na
		SND({A.B.{Na'}_inv(Ka).{A.Ka}_inv(Kc)}_Kb) % Sends the message

		2. State=1 /\ RCV({A.B.Na.{Nb'}_inv(Kb).{B.Kb}_inv(Kc)}_Ka) =|> 
                   		State':=2 /\ request(A,B,auth_1,Na) /\ % Requests to authenticate by checking value of Na
		Kab':=new() /\  % Creates a new symmetric key
		S':=new() /\  % Creates a new secret message
		SND({A.B.{Nb'.S'.Kab'}_inv(Ka)}_Kb) /\  % Sends the message
		secret(S',sec_1,{B,A}) /\  % Tries to ensure secrecy of S between A and B
		secret(Kab',sec_2,{B,A}) /\ % Tries to ensure secrecy of Kab between A and B
		witness(A,B,auth_2,Nb')

		3. State=2 /\ RCV({S}_Kab) =|> 
                   		State':=3 /\ secret(S,sec_3,{B,A}) /\ %Tries to ensure the secrecy of S between A and B
		request(A,B,auth_3,S) % Requests to authenticate by checking value of S
end role

role role_B(B,A:agent, %A, B represent the attributes 
	Ka,Kb,Kc:public_key, % Public keys of A, B and TA
	SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat, % Local state declaration
		Na,Nb,S:text, % Defining the cryptographic nonces and the secret message
                Kab:symmetric_key % Defining the symmetric session key

	init
		State := 0 % Local State Initiation
	transition
		1. State=0 /\ RCV({A.B.{Na'}_inv(Ka).{A.Ka}_inv(Kc)}_Kb) =|> 
                   		State':=1 /\ Nb':=new() /\ % Creates a new nonce value for Nb 
		SND({A.B.Na'.{Nb'}_inv(Kb).{B.Kb}_inv(Kc)}_Ka) /\ % Sends the message 
		witness(B,A,auth_1,Na')

		2. State=1 /\ RCV({A.B.{Nb.S'.Kab'}_inv(Ka)}_Kb) =|> 
                   		State':=2 /\ SND({S'}_Kab') /\ % Sends the message
		request(B,A,auth_2,Nb) /\ % Requests to authenticate by checking value of Nb
		witness(B,A,auth_3,S') 
end role

role session(A,B:agent, %A, B represent the attributes
	S:text, % Secret message declaration
	Ka,Kb,Kc:public_key) % Public Key declaration
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(B,A,Ka,Kb,Kc,SND2,RCV2) /\ % definition of roles in a session
		role_A(A,B,Ka,Kb,Kc,SND1,RCV1) % definition of roles in a session
end role

role environment() def=
	const
		ka,kb,kc:public_key, % declaring the public keys for the environment
                		alice,bob:agent, 
                		s1:text, % declare the secret
                		sec_1,sec_2,sec_3,auth_1,auth_2,auth_3:protocol_id % declare the known protocols
		intruder_knowledge = {alice,bob,ka,kb,kc} % establishes the intruder knowledge
	composition
		% session(alice,bob,s1,ka,kb,kc) /\ % defines a session in the environment
		session(alice,bob,s1,ka,kb,kc) /\ % defines a session in the environment
		session(bob,alice,s1,kb,ka,kc) % defines a session in the environment
end role

goal % specifies the required security goals for the protocol
	secrecy_of sec_1
	secrecy_of sec_2
	secrecy_of sec_3
	authentication_on auth_1
	authentication_on auth_2
	authentication_on auth_3
end goal

environment() % runs the environment